.\" Automatically generated by Pandoc 2.2.1
.\"
.TH "NFTFW" "1" "" "" "Nftfw documentation"
.hy
.SH NAME
.PP
\f[B]nftfw\f[] \[em] manage the Nftfw firewall generator
.SH SYNOPSIS
.PP
\f[B]nftfw\f[] [\f[B]\-h\f[]] [\f[B]\-c\f[] \f[I]config\f[]]
[\f[B]\-p\f[] \f[I]patternname\f[]] [\f[B]\-o\f[] \f[I]option\f[]]
[\f[B]\-x | \-f | \-i | \-q | \-v \f[]]
[\f[B]\f[BI]load|blacklist|whitelist|tidy\f[B]\f[]]
.SH DESCRIPTION
.PP
\f[B]nftfw\f[] is the front\-end for the firewall system that generates
rules for nftables.
It uses files in four directories in \f[I]/usr/local/etc/nftfw\f[] to
create firewall rules.
The directories create incoming and outgoing firewalls, and also tables
for whitelisting and blacklisting particular IP addresses.
The distribution is installed relative to the system's root or below
\f[I]/usr/local\f[].
.PP
The \f[B]nftfw\f[] command has several options, and most of these don't
change that often when the system is in operation.
Editing the ini format file \f[I]/etc/nftfw/config.ini\f[] changes the
values of options \- see nftfw\-config(5).
You may make temporary variable changes to configuration values from the
command line using the \f[B]\-o\f[] option to \f[B]nftfw\f[] (see
below).
.PP
The optional command argument to \f[B]nftfw\f[] runs main modules of the
program.
All actions need users to have root access permission.
A lock file ensures the running of only one instance of the program,
\f[B]nftfw\f[] queues actions if it's busy, and runs queued actions at
the finish of the task in hand.
.PP
\f[B]nftfw\f[] uses an initial setup file
\f[I]/usr/local/etc/nftfw/nftfw_init.nft\f[] to form the framework for
the completed ruleset.
When \f[B]nftfw\f[] builds the firewall rules, the
\f[I]nftfw_init.nft\f[] file is copied into the build system, and uses
include statements to pull in rules from the separate files created from
the four directories.
.PP
The system, as distributed, provides a firewall for a hosted server with
one external internet connection.
Administrators can change the \f[I]nftfw_init.nft\f[] file to support
more complex network needs.
.PP
Actions are:
.PP
\f[B]load\f[]
.PP
The \f[B]load\f[] command builds the firewall files by taking input from
files in directories in \f[I]/usr/local/etc/nftfw\f[]:
.IP \[bu] 2
\f[I]incoming.d\f[] contains rules controlling access to services on the
system;
.IP \[bu] 2
\f[I]outbound.d\f[] sets any rules controlling packets leaving the
system;
.IP \[bu] 2
\f[I]whitelist.d\f[] contains files named for the IP addresses that are
to have full access to the system and
.IP \[bu] 2
\f[I]blacklist.d\f[] contains files named for IP addresses in the
inbound packets that should not have access.
.PP
nftfw\-files(5) describes the contents and formats of files in these
directories.
.PP
\f[B]nftfw load\f[] performs these steps, creating files in directories
in \f[I]/usr/local/var/lib/nftfw\f[]:
.IP "1." 3
The command builds a firewall ruleset in several files in
\f[I]build.d\f[], and copies \f[I]nftfw_init.nft\f[] into the directory
creating the initial framework.
Rules generated from \f[I]incoming.d\f[] and \f[I]outgoing.d\f[] support
the basic system services.
Rules formed from the \f[I]whitelist.d\f[] and \f[I]blacklist.d\f[]
directories make use of nftables sets.
These sources change more often than the other directories, and the use
of sets allows \f[B]nftfw\f[] to change parts of the installed ruleset
without completely reloading the firewall.
.IP "2." 3
\f[B]nftfw\f[] now runs the \f[B]nft \-c\f[] command validating the
rules.
Errors cause \f[B]nftfw\f[] to abandon any further processing.
.IP "3." 3
If all is well, \f[B]nftfw\f[] compares the files with those in
\f[I]install.d\f[] retained from the last run of the program.
File comparison allows \f[B]nftfw\f[] to decide on doing nothing, making
a full update, or just updating the blacklist and/or whitelist sets.
.IP "4." 3
\f[B]nftfw\f[] copies all the files into the \f[I]install.d\f[]
directory and loads these rules into the system's kernel depending on
the decision above.
.IP "5." 3
Finally \f[B]nftfw\f[] captures the kernel settings and stores them in
\f[I]/etc/nftables.conf\f[], which is where the Debian system expects to
find the rules on system start\-up.
.PP
The steps from (4) above could result in a broken system if parts of the
installation fails.
\f[B]nftfw\f[] avoids the possible disaster by storing a backup copy of
the kernel's rules before attempting any update.
On failure, \f[B]nftfw\f[] reverts to the backup rules.
.PP
\f[B]whitelist\f[]
.PP
The \f[B]whitelist\f[] action is a scanner for the system's wtmp(5) or
utmp(5) file.
The system records user logins in this file along with the IP address
used to access the system.
\f[B]nftfw\f[] creates a file named for the IP address in
\f[I]/usr/local/etc/nftfw/whitelist.d\f[] as long as the IP address is
global.
On the next \f[B]load\f[] run, these addresses will find their way into
the firewall accepting connections before any further checking.
The effect is to whitelist remote users of the system.
.PP
The \f[B]whitelist\f[] command expires addresses that were automatically
created (identified by the suffix \f[I].auto\f[]) after a set number of
days given in \f[B]nftfw\f[]'s config file.
\f[B]nftfw\f[] uses incrond(8) to trigger a call the \f[B]load\f[]
function when the contents of the whitelist directory alters.
See nftfw\-files(5) for information on the file formats used for
whitelist control files.
.PP
\f[B]blacklist\f[]
.PP
The \f[B]blacklist\f[] command is a file scanner creating IP address
files in \f[I]/usr/local/etc/nftfw/blacklist.d\f[].
The scanner reads pattern files from
\f[I]/usr/local/etc/nftfw/patterns.d\f[].
Pattern files contain a file name (or a range of files given by shell
\f[I]glob\f[] rules), the relevant ports for blocking and a set of
regular expressions matching offending lines in the nominated log files.
.PP
When \f[B]nftfw\f[] finds a match, it updates a sqlite3(1) database with
the information and uses the frequency of matches (given in the config
file) to decide whether to blacklist the IP.
.PP
When scanning log files, the blacklist engine remembers the position in
the file at the end of the last scan, so only examines new entries on
every pass.
The \f[B]blacklist\f[] command also expires blacklisted IPs after a set
number of days.
See nftfw\-files(5) for information on the file formats used for
blacklist control files.
.PP
\f[B]tidy\f[]
.PP
The \f[B]tidy\f[] command removes old entries from the blacklist
database stopping it from growing to immense proportions.
Records are removed if the IPs they refer to haven't been seen for a set
number of days given in the configuration file, see nftfw\-config(5).
.PP
These are the available options to the program:
.TP
.B \f[B]\-h\f[], \f[B]\-\-help\f[]
Prints brief usage information.
.RS
.RE
.TP
.B \f[B]\-f\f[], \f[B]\-\-full\f[]
Does a full install, ignores the file compare installation step.
.RS
.RE
.TP
.B \f[B]\-x\f[], \f[B]\-\-no\-exec\f[]
Create rules in _/var/lib/nftfw/test.d and test them.
When used with the \f[B]blacklist\f[] command, prints the result of
scanning for matches without saving any information and without updating
stored log file positions.
.RS
.RE
.TP
.B \f[B]\-C\f[], \f[B]\-\-ConfigO\f[] CONFIG
Supply a alternate configuration file, overriding any values from the
default system settings.
.RS
.RE
.TP
.B \f[B]\-p\f[],\f[B]\-\-pattern\f[]
The argument only applies to the \f[B]blacklist\f[] command, and runs
the command using only one pattern file (the name of the file omitting
the suffix .pattern).
When combined with \f[B]\-x\f[] and setting \f[I]ports=test\f[] in the
pattern file the option can be used to test regular expressions in
pattern files.
.RS
.RE
.TP
.B \f[B]\-i\f[], \f[B]\-\-info\f[]
List all the configuration names and settings
.RS
.RE
.TP
.B \f[B]\-o\f[], \f[B]\-\-option\f[] OPTION
OPTION is keyword=value and may be comma separated list of configuration
options.
The values override any settings in the configuration file.
.RS
.RE
.TP
.B \f[B]\-q\f[], \f[B]\-\-quiet\f[]
Suppress printing of errors and information messages to the terminal,
syslog output remains active.
Terminal output is suppressed when the output is not directed to a
terminal
.RS
.RE
.TP
.B \f[B]\-v\f[], \f[B]\-\-verbose\f[]
Change the default logging settings to INFO to show all errors and
information messages.
.RS
.RE
.SH FILES
.PP
Files can be located in \f[I]/\f[] or \f[I]/usr/local\f[].
.TP
.B \f[I]/usr/local/etc/nftfw\f[]
Location of control files and directories
.RS
.RE
.TP
.B \f[I]/usr/local/etc/nftfw/nftfw_init.nft\f[]
\f[B]nftables\f[] basic framework
.RS
.RE
.TP
.B \f[I]/usr/local/etc/nftfw/config.ini\f[]
ini file with basic settings for \f[I]nftfw\f[], overriding built\-in
values
.RS
.RE
.TP
.B \f[I]/usr/local/var/lib/nftfw/\f[]
Location of \f[I]build.d\f[], \f[I]test.d\f[], \f[I]install.d\f[], lock
files and the sqlite3 databases storing file positions and blacklist
information
.RS
.RE
.SH BUGS
.PP
See GitHub Issues: <https://github.com/pcollinson/nftfw/issues>
.SH AUTHOR
.PP
Peter Collinson (huge credit to the ideas from Patrick Cherry's work for
the firewall for the Symbiosis hosting system).
.SH SEE ALSO
.PP
\f[B]nft(1)\f[], \f[B]nftfwls(1)\f[], \f[B]nftfwedit(1)\f[],
\f[B]nftfwadm(1)\f[], \f[B]nftfw\-config(5)\f[],
\f[B]nftfw\-files(5)\f[]
