{"drop": "#!/bin/sh\n# \n# Drop action\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    ADDRCMD='saddr'\nelse\n    ADDRCMD='daddr'\nfi    \nif [ \"$IPS\" != \"\" ]; then\n    IPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\nfi    \nif [ \"$PORTS\" != \"\" ]; then\n   echo add rule $PROTO $TABLE $CHAIN tcp dport $PORTS $IPSWITHDIRECTION $COUNTER $LOGGER jump dropcounter\n   echo add rule $PROTO $TABLE $CHAIN udp dport $PORTS $IPSWITHDIRECTION $COUNTER $LOGGER jump dropcounter\nelse\n   echo add rule $PROTO $TABLE $CHAIN $IPSWITHDIRECTION $COUNTER $LOGGER jump dropcounter\nfi   \n", "related": "#!/bin/sh\n# \n# related connections\n#\n# This rule has been added into nftfw_init.nft\n# because it needs to happen before firewall testing\n# so that testing only happens on initial connections\n#\n# included for symbiosis compatibility\nexit\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    ADDRCMD='saddr'\nelse\n    ADDRCMD='daddr'\nfi    \nif [ \"$IPS\" != \"\" ]; then\n    IPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\nfi    \nif [ \"$PORTS\" != \"\" ]; then\n   echo add rule $PROTO $TABLE $CHAIN tcp dport $PORTS $IPSWITHDIRECTION ct state related $COUNTER $LOGGER accept\n   echo add rule $PROTO $TABLE $CHAIN udp dport $PORTS $IPSWITHDIRECTION ct state related $COUNTER $LOGGER accept\nelse \n    echo add rule $PROTO $TABLE $CHAIN ct state related $COUNTER $LOGGER accept\nfi    \n", "ping": "#!/bin/sh\n# \n# Allow inbound pings\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    ADDRCMD='saddr'\nelse\n    ADDRCMD='daddr'\nfi    \nif [ \"$IPS\" != \"\" ]; then\n    IPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\nfi    \nif [ \"$PROTO\" = 'ip' ]; then\n    ICMP=icmp\nelse\n    ICMP=icmpv6\nfi\n# allow echo request\necho add rule $PROTO $TABLE $CHAIN $ICMP type '{echo-request}' $IPSWITHDIRECTION $COUNTER $LOGGER accept\n# this the above rule might do will with a limit\n#echo add rule $PROTO $TABLE $CHAIN $ICMP type '{echo-request}' limit rate 15/second $IPSWITHDIRECTION $COUNTER $LOGGER accept    \necho add rule $PROTO $TABLE $CHAIN $ICMP type '{echo-reply}' $IPSWITHDIRECTION $COUNTER $LOGGER accept\n\n", "accept": "#!/bin/sh\n# \n# Accept\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    ADDRCMD='saddr'\nelse\n    ADDRCMD='daddr'\nfi    \nif [ \"$IPS\" != \"\" ]; then\n    IPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\nfi    \nif [ \"$PORTS\" != \"\" ]; then\n   echo add rule $PROTO $TABLE $CHAIN tcp dport $PORTS $IPSWITHDIRECTION $COUNTER $LOGGER accept\n   echo add rule $PROTO $TABLE $CHAIN udp dport $PORTS $IPSWITHDIRECTION $COUNTER $LOGGER accept\nelse\n   echo add rule $PROTO $TABLE $CHAIN $IPSWITHDIRECTION $COUNTER $LOGGER accept\nfi   \n", "ftp-helper": "#!/bin/sh\n#\n# From the nft manual page\n#\n# Provide ftp helper\nif [ \"$DIRECTION\" = 'outgoing' ]; then\n    exit\nfi\n# add helper\ncat <<EOF\ntable $PROTO myhelpers {\n      ct helper ftp-standard {\n      \t type \"ftp\" protocol tcp\n      }\n}\nEOF\n# add line to prerouting chain\necho add rule $PROTO myhelpers prerouting tcp dport 21 ct helper 'set \"ftp-standard\"'\n", "allowtcpreset": "#!/bin/sh\n# \n# Allow tcp reset to pass\n#\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    ADDRCMD='saddr'\nelse\n    ADDRCMD='daddr'\nfi    \nif [ \"$IPS\" != \"\" ]; then\n    IPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\nfi    \nif [ \"$PORTS\" != \"\" ]; then\n   echo add rule $PROTO $TABLE $CHAIN tcp dport $PORTS $IPSWITHDIRECTION tcp flags '&' '(fin|syn|rst|ack) == rst' $COUNTER $LOGGER accept\nelse \n    echo add rule $PROTO $TABLE $CHAIN tcp flags '&' '(fin|syn|rst|ack) == rst' $COUNTER $LOGGER accept\nfi    \n", "established": "#!/bin/sh\n# \n# established connections\n#\n# This rule has been added into nftfw_init.nft\n# because it needs to happen before firewall testing\n# so that testing only happens on initial connections\n#\n# included for symbiosis compatibility\nexit\n\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    ADDRCMD='saddr'\nelse\n    ADDRCMD='daddr'\nfi    \nif [ \"$IPS\" != \"\" ]; then\n    IPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\nfi    \nif [ \"$PORTS\" != \"\" ]; then\n   echo add rule $PROTO $TABLE $CHAIN tcp dport $PORTS $IPSWITHDIRECTION ct state established $COUNTER $LOGGER accept\n   echo add rule $PROTO $TABLE $CHAIN udp dport $PORTS $IPSWITHDIRECTION ct state established $COUNTER $LOGGER accept\nelse \n    echo add rule $PROTO $TABLE $CHAIN ct state established $COUNTER $LOGGER accept\nfi    \n", "reject-www-data": "#!/bin/sh\n#\n# Designed for outbound use, prevent packets from\n# the webserver which is user \"www-data\" from sending anything other than domain requests.\n# Unless the action file contains nominated IP addresses in its list\n#\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    exit 0\nfi\ncat <<EOF\ntable $PROTO filter {\n      chain reject-www-data {\n      \t    tcp dport 53 $COUNTER $LOGGER accept\n      \t    udp dport 53 $COUNTER $LOGGER accept\n      }    \n}\nEOF\n# white list any IPs\nif [ \"$IPS\" != \"\" ]; then\n    echo add rule $PROTO filter reject-www-data $PROTO daddr $IPS $COUNTER $LOGGER accept\nfi\n# add reject rule to end of the reject-www-data chain\necho add rule $PROTO filter reject-www-data $COUNTER $LOGGER jump rejectcounter\n# add rule to outgoing to get to the chain\necho add rule $PROTO $TABLE $CHAIN meta skuid \"www-data\" $COUNTER $LOGGER jump reject-www-data\n", "syn-ack-flood-protection": "#!/bin/sh\n# \n# syn-ack-flood-protection\n#\n# This rule has been added into nftfw_init.nft\n# because it needs to happen before firewall testing\n# so that testing only happens on initial connections\n#\n# included for symbiosis compatibility\nexit\n\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    ADDRCMD='saddr'\nelse\n    ADDRCMD='daddr'\nfi    \nif [ \"$IPS\" != \"\" ]; then\n    IPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\nfi    \necho add rule $PROTO $TABLE $CHAIN $IPSWITHDIRECTION ct state invalid $COUNTER $LOGGER jump dropcounter\n", "http-meter": "#!/bin/sh\n# \n# Add metering to http/https rules\n#\n# Add 06-load-http-meter to incoming\n# to pull in the chain\n#\n# NB defines rules for ports 80 and 443\n# so replaces two entries in incoming.d\n#\n# Accept\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    ADDRCMD='saddr'\nelse\n    ADDRCMD='daddr'\nfi    \nif [ \"$IPS\" != \"\" ]; then\n    IPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\nfi    \necho add rule $PROTO $TABLE $CHAIN tcp dport '{80,443}' $IPSWITHDIRECTION $COUNTER $LOGGER jump httpaccept\n\n", "load-http-meter": "#!/bin/sh\n#\n# Add a chain to meter http traffic\n#\n# to use this install http meter rule in place\n# of direct calls to http and https\n#\n# You may want to adjust the limit rate\n# NB this is in the incoming table\n# \n# It seems safer to drop packets\n# when the meter causes a fail\n#\n# To list the meter\n#\n# nft list meter ip filter http-meter\n# or\n# nft list meter ip6 filter http-meter\n#\nLOGGER='log prefix \"HTTP Overlimit \"'\ncat <<EOF\ntable $PROTO filter {\n      chain httpaccept {\n            meter http-meter { $PROTO saddr limit rate 20/minute} counter accept\n\t    counter $LOGGER jump dropcounter\n      }\n}\nEOF\n\n\n", "reject": "#!/bin/sh\n# \n# Reject action\nif [ \"$DIRECTION\" = 'incoming' ]; then\n    ADDRCMD='saddr'\nelse\n    ADDRCMD='daddr'\nfi    \nif [ \"$IPS\" != \"\" ]; then\n    IPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\nfi    \nif [ \"$PORTS\" != \"\" ]; then\n   echo add rule $PROTO $TABLE $CHAIN tcp dport $PORTS $IPSWITHDIRECTION $COUNTER $LOGGER jump rejectcounter\n   echo add rule $PROTO $TABLE $CHAIN udp dport $PORTS $IPSWITHDIRECTION $COUNTER $LOGGER jump rejectcounter\nelse\n   echo add rule $PROTO $TABLE $CHAIN $IPSWITHDIRECTION $COUNTER $LOGGER jump rejectcounter\nfi   \n", "essential-icmpv6": "#!/bin/sh\n# \n# Allow Essential icmps for IPV6\nif [ \"$PROTO\" = 'ip6' ]; then\n    if [ \"$DIRECTION\" = 'incoming' ]; then\n\tADDRCMD='saddr'\n    else\n\tADDRCMD='daddr'\n    fi    \n    if [ \"$IPS\" != \"\" ]; then\n\tIPSWITHDIRECTION=\"$PROTO $ADDRCMD $IPS\"\n    fi    \n    echo add rule $PROTO $TABLE $CHAIN icmpv6 type {destination-unreachable, packet-too-big, time-exceeded, parameter-problem} $IPSWITHDIRECTION $COUNTER $LOGGER accept\n    echo add rule $PROTO $TABLE $CHAIN icmpv6 type {nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert, nd-redirect} ip6 hoplimit 255 $IPSWITHDIRECTION $COUNTER $LOGGER accept\nfi\n"}